AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for a Scalable Web App Server

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the Amazon VPC where resources will be created

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet IDs where resources will be created

  InstanceType:
    Type: String
    Description: EC2 instance type for the web servers
    Default: t2.micro

  GitHubRepository:
    Type: String
    Description: GitHub repository URL for the application code
    Default: "https://github.com/abhisran/web_temp.git"

  WebServerSGIngressCidr:
    Type: String
    Description: CIDR range for allowing traffic to the web servers (e.g., trusted IP)

Resources:
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebServerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebServerRole

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the ALB from anywhere
      GroupName: ALBSecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup
      VpcId: !Ref VpcId

  WebServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from the ALB security group
      GroupName: WebServerSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref WebServerSGIngressCidr
      Tags:
        - Key: Name
          Value: WebServerSG
      VpcId: !Ref VpcId

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref SubnetIds
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VpcId

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1
      VPCZoneIdentifier: !Ref SubnetIds
      TargetGroupARNs:
        - !Ref TargetGroup

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0f409bae3775dc8e5
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !GetAtt WebServerSG.GroupId
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex
            sudo su
            yum update -y
            yum install -y httpd git
            systemctl start httpd
            systemctl enable httpd
            git clone ${GitHubRepository} /var/www/html
            systemctl restart httpd

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

Outputs:
  LoadBalancerDNSName:
    Description: DNS name for the LoadBalancer
    Value: !GetAtt ALB.DNSName
